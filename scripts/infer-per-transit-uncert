#!/usr/bin/env python
# -*- coding: utf-8 -*-

from pathlib import Path
import argparse
from typing import Tuple

import jax.numpy as jnp
import matplotlib as mpl
import matplotlib.colors as colors
import matplotlib.pyplot as plt
import numpy as np
import numpyro
import numpyro.distributions as dist
from astropy.io import fits
from jax import random
from jax.config import config
from numpyro.infer import SVI, Trace_ELBO
from tqdm import tqdm

config.update("jax_enable_x64", True)


def load_data(
    data_path: Path = Path("/data"),
    *,
    min_nb_transits: int = 3,
    color_range: Tuple[float, float] = (0.5, 3.0),
    mag_range: Tuple[float, float] = (8.0, 12.0),
) -> fits.fitsrec.FITS_rec:
    with fits.open(data_path / "edr3-rv-good-plx-result.fits.gz", "r") as f:
        data = f[1].data

    m = np.isfinite(data["phot_g_mean_mag"])
    m &= np.isfinite(data["bp_rp"])
    m &= np.isfinite(data["dr2_radial_velocity_error"])

    m &= data["dr2_rv_nb_transits"] > min_nb_transits

    m &= color_range[0] < data["bp_rp"]
    m &= data["bp_rp"] < color_range[1]
    m &= mag_range[0] < data["phot_g_mean_mag"]
    m &= data["phot_g_mean_mag"] < mag_range[1]

    return data[m]


def setup_model() -> SVI:
    def model(num_transit, sample_variance):
        log_sigma0 = numpyro.sample("log_sigma0", dist.Normal(0.0, 10.0))
        log_dsigma = numpyro.sample(
            "log_dsigma",
            dist.Normal(0.0, 10.0),
            sample_shape=(len(sample_variance),),
        )
        sigma2 = jnp.exp(2 * log_sigma0) + jnp.exp(2 * log_dsigma)
        stat = sample_variance * (num_transit - 1) / sigma2
        numpyro.sample("obs", dist.Chi2(num_transit - 1), obs=stat)

    def guide(num_transit, sample_variance):
        mu_log_sigma0 = numpyro.param(
            "mu_log_sigma0", 0.5 * np.log(np.median(sample_variance))
        )
        sigma_log_sigma0 = numpyro.param(
            "sigma_log_sigma0", 1.0, constraint=dist.constraints.positive
        )

        mu_log_dsigma = numpyro.param(
            "mu_log_dsigma", 0.5 * np.log(sample_variance)
        )
        sigma_log_dsigma = numpyro.param(
            "sigma_log_dsigma",
            np.ones_like(sample_variance),
            constraint=dist.constraints.positive,
        )

        numpyro.sample(
            "log_sigma0", dist.Normal(mu_log_sigma0, sigma_log_sigma0)
        )
        numpyro.sample(
            "log_dsigma", dist.Normal(mu_log_dsigma, sigma_log_dsigma)
        )

    optimizer = numpyro.optim.Adam(step_size=0.05)
    return SVI(model, guide, optimizer, loss=Trace_ELBO())


def fit_data(
    data: fits.fitsrec.FITS_rec,
    *,
    num_mag_bins: int,
    num_color_bins: int,
    color_range: Tuple[float, float] = (0.5, 3.0),
    mag_range: Tuple[float, float] = (8.0, 12.0),
    num_iter: int = 5,
    targets_per_fit: int = 1000,
    num_optim: int = 5000,
    seed: int = 11239,
) -> Tuple[np.ndarray, np.ndarray]:
    # Parse data
    num_transit = np.ascontiguousarray(
        data["dr2_rv_nb_transits"], dtype=np.int32
    )
    eps = np.ascontiguousarray(
        data["dr2_radial_velocity_error"], dtype=np.float32
    )
    sample_variance = 2 * num_transit * (eps ** 2 - 0.11 ** 2) / np.pi
    mag = np.ascontiguousarray(data["phot_g_mean_mag"], dtype=np.float32)
    color = np.ascontiguousarray(data["bp_rp"], dtype=np.float32)

    # Setup the JAX model
    svi = setup_model()

    # Setup the grid and allocate the memory
    mag_bins = np.linspace(mag_range[0], mag_range[1], num_mag_bins + 1)
    color_bins = np.linspace(
        color_range[0], color_range[1], num_color_bins + 1
    )
    mu = np.empty((len(mag_bins) - 1, len(color_bins) - 1, num_iter))
    sigma = np.empty_like(mu)

    np.random.seed(seed)
    inds = np.arange(len(data))
    for n in tqdm(range(len(mag_bins) - 1)):
        for m in tqdm(range(len(color_bins) - 1), position=1):
            mask = mag_bins[n] <= mag
            mask &= mag <= mag_bins[n + 1]
            mask &= color_bins[m] <= color
            mask &= color <= color_bins[m + 1]

            for k in tqdm(range(num_iter), position=2):
                masked_inds = np.random.choice(
                    inds[mask],
                    size=targets_per_fit,
                    replace=mask.sum() <= targets_per_fit,
                )
                svi_result = svi.run(
                    random.PRNGKey(seed + n + m + k),
                    num_optim,
                    num_transit[masked_inds],
                    sample_variance[masked_inds],
                    progress_bar=False,
                )
                params = svi_result.params
                mu[n, m, k] = params["mu_log_sigma0"]
                sigma[n, m, k] = params["sigma_log_sigma0"]

    return mu, sigma


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--data", default="/data")
    parser.add_argument("--min-nb-transits", type=int, default=3)
    parser.add_argument("--min-color", type=float, default=0.5)
    parser.add_argument("--max-color", type=float, default=3.0)
    parser.add_argument("--num-color", type=int, default=14)
    parser.add_argument("--min-mag", type=float, default=8.0)
    parser.add_argument("--max-mag", type=float, default=12.0)
    parser.add_argument("--num-mag", type=int, default=15)
    parser.add_argument("--num-iter", type=int, default=5)
    parser.add_argument("--targets-per-fit", type=int, default=1000)
    parser.add_argument("--num-optim", type=int, default=5000)
    parser.add_argument("--seed", type=int, default=11239)
    args = parser.parse_args()

    data = load_data(
        data_path=Path(args.data).resolve().absolute(),
        min_nb_transits=args.min_nb_transits,
        color_range=(args.min_color, args.max_color),
        mag_range=(args.min_mag, args.max_mag),
    )

    mu, sigma = fit_data(
        data,
        num_mag_bins=args.num_mag,
        num_color_bins=args.num_color,
        color_range=(args.min_color, args.max_color),
        mag_range=(args.min_mag, args.max_mag),
        num_iter=args.num_iter,
        targets_per_fit=args.targets_per_fit,
        num_optim=args.num_optim,
        seed=args.seed,
    )

    # Save the results
    hdr = fits.Header()
    hdr["min_nb_transits"] = args.min_nb_transits
    hdr["min_color"] = args.min_color
    hdr["max_color"] = args.max_color
    hdr["num_color"] = args.num_color
    hdr["min_mag"] = args.min_mag
    hdr["max_mag"] = args.max_mag
    hdr["num_mag"] = args.num_mag
    hdr["num_iter"] = args.num_iter
    hdr["targets_per_fit"] = args.targets_per_fit
    hdr["num_optim"] = args.num_optim
    hdr["seed"] = args.seed
    fits.HDUList(
        [
            fits.PrimaryHDU(header=hdr),
            fits.ImageHDU(mu),
            fits.ImageHDU(sigma),
        ]
    ).writeto("/data/rv_uncertainty_grid.fits", overwrite=True)
